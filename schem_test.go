package mcschem_test

import (
	"bytes"
	"github.com/JamesStewy/go-mcschem"
	"io"
	"testing"
)

func loadSchem(r io.Reader, t *testing.T) *mcschem.Schem {
	s, err := mcschem.Unmarshal(r, true)
	if err != nil {
		t.Fatal(err)
	}
	return s
}

func saveSchem(w io.Writer, s *mcschem.Schem, t *testing.T) {
	if err := s.Marshal(w, true); err != nil {
		t.Fatal(err)
	}
}

// Roundtrip test
func TestMarshalUnmarshal(t *testing.T) {
	in := bytes.NewBuffer(rt_test_schem)
	s := loadSchem(in, t)

	out := bytes.NewBuffer([]byte{})
	saveSchem(out, s, t)

	if bytes.Compare(out.Bytes(), rt_test_schem) != 0 {
		t.Fatalf("Roundtrip mismatch:\nHave: %#v\nWant: %#v", out.Bytes(), rt_test_schem)
	}
}

func TestBlock(t *testing.T) {
	s := loadSchem(bytes.NewBuffer(rt_test_schem), t)
	for _, test := range block_test_data {
		block := s.Block(test.X,test.Y,test.Z)
		if block.Id != test.Block.Id || block.Data != test.Block.Data {
			t.Fatalf("For x=%d, y=%d, z=%d Have: Id=%d Data=%d Want: Id=%d Data=%d\n", test.X,test.Y,test.Z ,block.Id, block.Data, test.Block.Id, test.Block.Data)
		}
	}
}

type blockTest struct {
	X int
	Y int
	Z int
	Block mcschem.Block
}

var block_test_data = []blockTest{
	blockTest{0, 3, 2, mcschem.Block{0, 0}},
	blockTest{0, 4, 1, mcschem.Block{5, 0}},
	blockTest{0, 8, 14, mcschem.Block{44, 4}},
	blockTest{0, 2, 12, mcschem.Block{0, 0}},
	blockTest{0, 7, 23, mcschem.Block{109, 3}},
	blockTest{0, 6, 10, mcschem.Block{0, 0}},
	blockTest{0, 5, 5, mcschem.Block{67, 2}},
	blockTest{0, 5, 13, mcschem.Block{108, 6}},
	blockTest{0, 5, 21, mcschem.Block{87, 0}},
	blockTest{0, 4, 7, mcschem.Block{44, 3}},
	blockTest{0, 3, 17, mcschem.Block{108, 3}},
	blockTest{0, 5, 4, mcschem.Block{53, 7}},
	blockTest{0, 7, 15, mcschem.Block{44, 12}},
	blockTest{0, 1, 4, mcschem.Block{67, 7}},
	blockTest{0, 2, 17, mcschem.Block{45, 0}},
	blockTest{0, 4, 0, mcschem.Block{5, 0}},
}

var rt_test_schem = []byte{
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xd4, 0x96, 0x5f, 0x4f, 0xdb, 0x30,
	0x10, 0xc0, 0x2f, 0x7f, 0x9c, 0x26, 0x25, 0x81, 0x6d, 0xa0, 0xd1, 0x7d, 0x87, 0xf4, 0x69, 0x1a,
	0x0f, 0x7b, 0xdb, 0x5a, 0xa4, 0x21, 0xc1, 0x36, 0xc1, 0x24, 0xb6, 0xbd, 0x4c, 0x0e, 0x35, 0x6d,
	0x34, 0x3b, 0x61, 0xa9, 0xd1, 0xe8, 0x1e, 0xf8, 0x10, 0x7c, 0xba, 0x7d, 0x91, 0xbd, 0x4d, 0x62,
	0x77, 0x2e, 0xb4, 0xa9, 0x04, 0xa8, 0x2a, 0x58, 0x2b, 0x27, 0x71, 0xce, 0x1d, 0x77, 0x3f, 0x9f,
	0xaf, 0xb6, 0x93, 0x26, 0x80, 0x0b, 0xec, 0x30, 0xef, 0xe9, 0x01, 0x38, 0x2e, 0x04, 0xef, 0x44,
	0xde, 0x1f, 0x68, 0x88, 0xf0, 0x71, 0x57, 0x14, 0x7d, 0xf4, 0xb6, 0x3c, 0x88, 0x0e, 0xb7, 0x3f,
	0x1c, 0x1f, 0x0f, 0x85, 0xfe, 0x0c, 0x00, 0x71, 0xcd, 0xfe, 0x72, 0x79, 0x79, 0xf9, 0xb7, 0x66,
	0x7f, 0x45, 0xfb, 0x4f, 0x08, 0xd1, 0x1e, 0xd7, 0xa2, 0xca, 0xb9, 0x1c, 0x02, 0x7b, 0x23, 0x4f,
	0x06, 0xbc, 0x01, 0xc1, 0x5b, 0x59, 0x1e, 0x7d, 0x1f, 0x62, 0xfe, 0x6f, 0x06, 0xe0, 0xc3, 0x95,
	0xf8, 0x90, 0xa6, 0x29, 0x8e, 0xa4, 0xd1, 0xdf, 0xe9, 0xc0, 0xd6, 0xd6, 0xc5, 0x05, 0x8e, 0x52,
	0xa6, 0x6d, 0x09, 0x4a, 0xa5, 0x99, 0x62, 0x30, 0x49, 0xc0, 0x70, 0xd4, 0x6d, 0xa3, 0x33, 0xf2,
	0x77, 0x3a, 0x98, 0x99, 0x62, 0x1a, 0x8a, 0x94, 0xa4, 0x95, 0x62, 0x8c, 0x9d, 0x83, 0x4f, 0x7e,
	0xca, 0x92, 0x6d, 0x72, 0xab, 0x4c, 0x11, 0xff, 0xfc, 0x15, 0x85, 0xd2, 0x9f, 0x94, 0x87, 0x26,
	0x18, 0x35, 0x71, 0x18, 0xcd, 0xe0, 0x1b, 0xf6, 0x4b, 0xa4, 0x67, 0xa4, 0x4d, 0x3c, 0x06, 0x1b,
	0xba, 0x6c, 0xa7, 0xc8, 0x57, 0x59, 0x7a, 0xc5, 0xa7, 0x92, 0x4d, 0x49, 0xd3, 0xfa, 0x1b, 0xe0,
	0x77, 0xb9, 0xe6, 0xb4, 0x44, 0x98, 0x91, 0x38, 0x8e, 0x51, 0x27, 0x49, 0x42, 0x86, 0x8b, 0x61,
	0x28, 0x10, 0x78, 0x81, 0xe7, 0x63, 0x4e, 0xe0, 0x31, 0xd4, 0x75, 0x19, 0xaf, 0x95, 0x5d, 0x9b,
	0x6e, 0x63, 0x05, 0x25, 0xf0, 0xe8, 0xb9, 0xa6, 0x43, 0x00, 0x0f, 0xc5, 0xd8, 0xe0, 0x4d, 0x34,
	0x40, 0x03, 0x67, 0x30, 0x21, 0xf5, 0x94, 0x59, 0x59, 0x83, 0xd8, 0x68, 0x2a, 0x28, 0xf4, 0x70,
	0x06, 0x13, 0xe4, 0x42, 0x8c, 0xa3, 0x0b, 0xc9, 0x24, 0x65, 0x8c, 0xa7, 0x7a, 0xa9, 0x20, 0xc6,
	0x20, 0x82, 0x70, 0xbb, 0xd0, 0xb9, 0xce, 0xc5, 0xb0, 0x49, 0xff, 0x89, 0x20, 0xfe, 0x94, 0x4b,
	0x51, 0xf7, 0xf9, 0x21, 0xb8, 0x79, 0x0f, 0x58, 0x67, 0x20, 0x86, 0xda, 0x03, 0xe7, 0xcc, 0x80,
	0xc0, 0x19, 0xe1, 0xe0, 0xe0, 0xf8, 0x8b, 0x6a, 0x0a, 0xc1, 0xdf, 0xc5, 0xed, 0x40, 0x00, 0xb6,
	0xa3, 0x85, 0x32, 0x99, 0xab, 0x4d, 0xf0, 0x34, 0xef, 0x7b, 0xd0, 0xec, 0xf0, 0xa2, 0x8b, 0xd9,
	0x55, 0x49, 0x49, 0xe0, 0x40, 0xd0, 0xe5, 0x8a, 0xf7, 0x05, 0x2d, 0x9a, 0xd8, 0x9b, 0x2a, 0x2f,
	0xc4, 0x51, 0xc5, 0x8f, 0xf5, 0xeb, 0x5e, 0xce, 0x55, 0x59, 0xf4, 0xbe, 0x65, 0xb4, 0xbb, 0x1c,
	0x9c, 0xb5, 0x3c, 0x2d, 0xb4, 0xe3, 0x80, 0x7f, 0x20, 0x4b, 0x5d, 0xcf, 0x7c, 0x68, 0xb6, 0x73,
	0x3f, 0xb6, 0x50, 0xa2, 0xe2, 0xf2, 0x16, 0x36, 0xb3, 0xc8, 0x0e, 0x2c, 0xf6, 0x24, 0xb2, 0xc8,
	0x5e, 0xb1, 0xd8, 0x93, 0xc4, 0x22, 0xfb, 0x89, 0xc5, 0x9e, 0x3c, 0xb3, 0xc8, 0x5e, 0xb7, 0xd8,
	0x93, 0xe7, 0x16, 0xd9, 0x9b, 0x16, 0xd9, 0x2d, 0x8b, 0xec, 0x17, 0x33, 0x99, 0xe3, 0x5b, 0x76,
	0xb4, 0xd3, 0x33, 0x6f, 0xe7, 0xae, 0x90, 0x7c, 0x44, 0x4f, 0xeb, 0xfb, 0xe2, 0xc7, 0x69, 0x5e,
	0x89, 0xde, 0x47, 0x74, 0x88, 0x6a, 0x9f, 0x17, 0x14, 0xee, 0xc2, 0xd3, 0x3d, 0x7e, 0xf6, 0x5e,
	0xf0, 0x2a, 0x1b, 0x5d, 0xdf, 0xc4, 0xe4, 0x4d, 0xf6, 0xf2, 0xe2, 0xe0, 0x84, 0xff, 0x2c, 0x26,
	0xf9, 0x09, 0xc6, 0xcd, 0x7a, 0x9a, 0xc6, 0x9c, 0x80, 0xc6, 0xa6, 0x29, 0x0c, 0xae, 0x57, 0x70,
	0xe7, 0x4d, 0xde, 0xb8, 0xf1, 0x26, 0x0f, 0x96, 0xec, 0x26, 0xbf, 0xb3, 0xf3, 0xbe, 0x45, 0x76,
	0x63, 0x79, 0x6f, 0xdb, 0xa5, 0xb8, 0x11, 0x1f, 0xd1, 0x4e, 0x0f, 0x6f, 0xdc, 0xe9, 0xe1, 0xbc,
	0xdd, 0xd9, 0x98, 0x76, 0xa7, 0x5f, 0xde, 0xd6, 0x1a, 0x77, 0x81, 0xb6, 0xcf, 0x05, 0xf6, 0x16,
	0x00, 0xb7, 0xa6, 0x60, 0xfc, 0x1d, 0x86, 0xba, 0x2c, 0xc4, 0xc3, 0x7d, 0x52, 0xcc, 0x0d, 0x5f,
	0xe4, 0x04, 0xcd, 0xd5, 0x92, 0xa6, 0xcd, 0xaa, 0x57, 0x6d, 0x55, 0xbd, 0x61, 0xb3, 0xea, 0xd6,
	0xe3, 0x3c, 0x99, 0xd1, 0xfd, 0xde, 0x41, 0xff, 0xff, 0x00, 0x2d, 0xd5, 0x1e, 0x9f, 0x0b, 0xbc,
	0xc8, 0xd7, 0xb8, 0xd5, 0xc3, 0x33, 0x37, 0x7c, 0x6d, 0x09, 0xf7, 0x38, 0xfc, 0x0b, 0x00, 0x00,
	0xff, 0xff, 0xd5, 0x3a, 0xab, 0x6f, 0x85, 0x11, 0x00, 0x00,
}
